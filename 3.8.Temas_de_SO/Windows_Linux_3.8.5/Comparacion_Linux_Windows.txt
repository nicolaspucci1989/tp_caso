En linux los threads son kernel threads, el scheduling esta basado en threads, no en procesos.
	Linux distingue tres clasa de threads para propositos de schedule
	1- Real-time FIFO.
	2- Real-time round robin.
	3- Timesharign.

Los threads Real-time FIFO tienen la mayor prioridad y no se las puede desalojar excepto por una
nueva thread real-time FIFO de mayor prioridad. Los threads Real-time round-robin son los mismos que 
real-time FIFO excepto que estos tiene un quentum asocioado, y son desalojables por reloj. Si hay 
multiples threads round-robin, cada una es ejecutada por su cuantum, luego del cual va al final de la lista
de real-time round-robin threads. Ninguna de estas clases es de real-time en ningun sentido. Estas clases simplemente
son de mayor prioridad que las threads en la clase estandard de timesharing. La razon por la cual Linux las llama real-time
es que Linux se adecua al estandard P1003.4 el cual usa esos nombres. Los threads real-time son internamente 
representados con niveles de prioridad que van de 0 a 99, 0 siend la mas alta y 99 la mas baja.
	Los threads convencionales que no son real-time forman una clase separada y usan un algoritmo de schedule diferente
entonces no compiten con threads real-time. Internamente, estos threads son associados con niveles de prioridad que van de
100 a 139, es decir, Linux distingue internamente 140 niveles de prioridad (para real-time y no real-time). En cuanto
a las threads real-time round-robin, Linux alloca tiempo de CPU para los threads que no son real-time basados en sus
requerimientos y sus niveles de prioridad.
	Linux asocia un valor "nice" con cada thread. El valor por defecto es 0, pero puede ser cambiada usando en system call
nice(valor), donde valor va de -20 a +19. Este valor determina la prioridad estatica de cada thread. 

	El funcionamiento interno de los algoritmos de schdule en Linux estan fuertemento relacionados con el disenio de 
la estructura de datos runqueue, que es usada por el schedule para hacer un seguimiento de todas las tareas que pueden 
ser ejecutadas en el sistema y seleccionar la siguiente para que ejecute. Un runqueue es asociado con cada CPU en el 
sistema.
	Historicamente, un sceduler popular de LInux era el O(1) scheduler. Su nombre se debe a que era capaz de llevar a cabo 
operaciones de manejo de tarea, tales como selecionar una tarea o poner en cola una tarea para el runqueue, en tiempo constante,
independientemente del numero total de tareas en el sistema. En este algoritmo el scheduler se organiza en dos arrays,
activo y expirado. Cada uno de estos es un array de 140 cabezas de lista, cada una corresponde a una prioridad diferente
Cada cabeza de lista apunta a una lista doblemente linkeada de procesos a una prioridad dada.
	la operacion basica del scheduler es la siguiente
	El scheduler selcciona una tarea de la lista de alta prioridad en el array activo, si el quantum de la tarea expira, se la
mueve a la lista de espirados. Si la tarea se bloquea antes de que termine su quantum, una vez que el evento ocurre y puede 
continuar su ejecucion, es llevada de vuelta a su array activo original, y se decremente  su quantum para reflejar el tiempo de 
CPU que ya fue utilizado. Una vez que el queantum es agotado completamente, se lleva la tarea a el array de expirados. Cuando
no hay mas tareas en el array activo, el scheduler simplemente intercambia los punteros, entonces los arrays expirados ahora
son activos y vice veresa. Este metodo asegura que las tareas de baja prioridad no sufriran de inanicion.
	Aqui, diferentes niveles le son asignados diferentes quatum, con mayor quantum asignado a procesos de mayor prioridad.
	La idea detras de este esquema es que los procesos salgan del kernel lo antes prosible.


-------------------------------------------------------------------------------------------------------------------------
Schedule de procesos en Windows.
	Windows 3.1 usaba un scheduler sin desalojo. Dependia de que el programa informe al SO que ya no necesitaba el
procesador para que pueda continuar con otro proceso. Windows 95 introdujo un scheduler con desalojo rudimentario, 
sin embargo, para el soporte de aplicaciones mas antiguas dejaba que las aplicacion de 16 bits ejecuten sin desalojo.

	Las versiones de windows basadas en NT usan un scheduler basado en multicolas, con 32 niveles de prioridad.
Tiene el objetivo de satisfacer los siguientes requerimientos .
	1- Dar preferencia a trabajos cortos.
	2- Dar preferencia a processos atados por E/S.
	3- Establecer rapidamente la naturaleza del proceso y hacer el schedule de este de forma acorde.

	Todos los procesos reciben un aumento de la prioridad luego de un evento de espera, pero los procesos que han experimentado una
espera por E/S de teclado  reciben un aumento mayor. 

Windows XP usa un schedule con desalojo por quantum, Este scheduler fue modificado en Windows Vista para usar el registro de 
contador de ciclo presente en los procesadores modernos para hacer el seguimiento de cuantod ciclos de CPU un thread habia ejecutado,
en vez de usar rutinas de interrupcion por intervalo de tiempo.


Administracion de memoria.
	Estructuras de datos utilizadas
	
	Windows.
		Windows NT usa una estructura llamada Virtual Address Descriptors (VAD) de tipo arbol en lugar de una 
	lista linkeada.	Cada VAD denota un rango de direcciones que tiene el los mismos parametros de proteccion y encomienda
	la misma informacion. Cada VAD puede estar en uno de los siguientes tres estados: invalida, reservada, enntregada.

	Linux.
		Linux mantiene una lista linkeada de estructuras de la memoria virtual. Estas estructuras representan areas memoria 
	contigua. Cuando se busca una pagina se la busca en la lista. Tambien contiene el rango de direcciones, modo de proteccion
	y la direccion en la cual crece (hacia arriba o hacia abajo)

	Distribucion del espacion de direcicones de proceso.

		Windows.
			Windows permite que cada proceso tenga sus 4gb de direcciones logicas usando paginacion.
			Los 2gb superiores son reservados para modod kernel.
			Los 2gb inferirores son reservados para modo usuario

		Linux.
			Se reserva 3gb de espacio de memoria para modo usuario
			1gb se mantiene para modo kernel.

	Paginacion
		Linux.
			Usa paginacion por demandoa sin pre-paginado. 

		Windows usa paginacion por demanda cluster.
			En lugar de llevar de a una pagina, se envian ocho paginas a memoria de forma simultanea. Usa el modelo de conjunto de 
			trabajo
